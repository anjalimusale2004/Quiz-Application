-------
class 2
-------

How to add JS in html page ?

<script src="script.js"></script>

## Understanding console

console.log() ---> print
console.error()--->
console.war() ---->
console.debug()

## Understanding alert

window.alert("Hello world!");
alert("Hello world!");

prompt

---

prompt()
prompt(message)

Note: prompt is advance version of alert and we can hold it's response and in alert we can't do it

How to hold prompt response ? : variable

## How to use variables ?

var & let : These are like container
Using const : once we assign to const, it will not change

but if we have different type of data like int, flot how we can store it ?

## Data types in JS
------------------------------------------------------

types :

primitive and reference type

20, 30.9, ashwani, true , c, null , undefined - primitive data type

[] () {} - reference data tyoes

## difference between refrence and primitive datatype
------------------------------------------------------

var v = 10;
var c=v;

c=c+2;

console.log(v);
console.log(c);

---

var arr=[1,2,3,4,5];
var arr1=arr;
arr1.pop(); // make change in orginal value bcz we pass refernce

## how to overcome this ?

use spread
var arr=[1,2,3,4,5];
var arr1=[...arr];








---------
class 3
---------



# conditionals in javascript
------------------------------------------------------
1. if else /else if
2. switch
3. ternory operator

Note: if-else executed based on true false right but let's understand some types also
null, undefined, , 0, NAN , '' , "", document.all ----> false
baki sab --- > true

## loops in javascript
------------------------
1. for loop     --done
2. while loop   --done
3. dowhile-loop --done 
4. foreach loop --done 

## functions in javascript
------------------------------

function in javascript are different from java here we don't need to give return type a
and parameter type( we can pass anything in it)


---------------JAVA---------------
String print(int a)
{

}
----------------JS-----------------
function print(a)
{

}
print() // calling

## note: in js we treat function as value also

in ES5 -- we have 3 types of function

1. function statement(normal function)
2. function expresion
3. anonymous functions

in ES6 -- we can write same function in 3 types

1.fat arrow function
    a. basic fat arrow
    b. fat arrow with one param
    c. fat arrow with implicit return


-----------------    
Functions in ES5
------------------

1. function statement(normal function)
---------------------------------------

function print()
{
console.log("hello");
}
print()

2. function expresion
-----------------------------------------

var func = function (){
console.log("hello");
}
func()

# note: in JS we will not give name in right side, left side variable name treaed as 
function name

3. anonymous functions
------------------------------------------

function (){
console.log("hello");
}


-----------------    
Functions in ES6
------------------


## a.basic fat arrow function
-----------------------------
var fun = () => {

}

b. fat arrow with one param
-------------------------------
var fun = (a)=>{

}

fun(20);


c. fat arrow with implicit return
-----------------------------------
var fun = ()=>"Genie Ashwani";

var res=fun();




# note-: in js functions with no return is actually return undefined




-----------
class 4
-----------

let's explore : 
undefined: it accur when var ko value assing na ki gyi ho
not defined : it accur when var not defined ho 
null: it is also a value like, accur when soemthing not found 


---------------------
Array in javascript
--------------------- 

in java we can say collection of same datatype right but in javascript we can store 
hetrogenious values in array 

var arr=[1,2,"ashwani",[],function (){}]
arr[2];


-----------------------
Objects in javascript
-----------------------

var obj = {};   ///
var ob1=new Object();


var obj={
    name:"ashwani",
    "age":25,
    email:"ashwani@gmail",
    contact:"56789087654"
}


----------------------------
this keyword is javascript
----------------------------
in JAVA this refer to the current object instance right but in javascript this value is 
different at different place 

global - window
function - window  
method - object
function inside method(ES5) - window
function inside method(ES6) - object
constructor - new blank object 
event listiner - that element jispe listiner laga ha


global : kisi bhi scope me nhi 
------------------------------
console.log(this);


function 
-------
function print()
{
    console.log(this);
}

method : in js we can say method which is inside object 
------------------------------------------------------
var obj ={
    name : function(){
        console.log(this);  //this.age
    },
    age:25

}

obj.name(); 


function inside method(ES5)
----------------------------
var obj = {
    parent : function(){
        function child()
        {
            console.log(this); 
        }

        child();
    }
}

obj.parent();



function inside method(ES6)
----------------------------

var obj ={
    name : function(){
        var child = ()=>{
            console.log(this); 
        }
    }

}

obj.name();





constructor - new blank object 
------------------------------
function print()
{
    console.log(this);
}

var obj=new print();




event listiner - that element jispe listiner laga ha
--------------------------------------------------------
<button>click</button>

document.querySelector("button")
.addEventListener("click",function(){
    console.log(this); 
})



call apply bind
---------------

call : through call we can change 'this' value in function 

var obj={
    name:"ashwani"
}

function print()
{
    console.log(this);
}

print.call(obj)

apply
------
var obj={
    name:"ashwani"
}

function print(x,y,z)
{
    console.log(this,x,y,z);
}

print.apply(obj,[1,2,3])


-------
bind
------
var obj={
    name:"ashwani"
}

function print()
{
    console.log(this);
}

var func=print.bind(obj)
func();




----------------------
closures in javascript
-----------------------

A function which retun another function using some value of it's parent in called clouser


function print()
{
    var p=10;
     return function child()
    {
    
        console.log(p);
        
    }
}


var fun=print();
fun();
